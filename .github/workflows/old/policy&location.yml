name: Azure Terraform Deployment  # ðŸ”¹ Updated name

on:
  workflow_dispatch:  # ðŸ”¹ Manual trigger for all jobs

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read

jobs:
  init-and-plan:
    name: Terraform Init & Plan
    runs-on: ubuntu-latest
    outputs:
      plan-exists: ${{ steps.plan-check.outputs.plan_exists }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # âœ… Step 1: Login to Azure using OIDC
    - name: Login to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        allow-no-subscriptions: true

    # âœ… Step 2: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      
    # âœ… Step 3: Configure Terraform for OIDC
    - name: Set Terraform Environment Variables
      run: |
        echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
        echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

    # âœ… Step 4: Terraform Init
    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=terraform_tfstate_rg" \
          -backend-config="storage_account_name=terraformconfigsa" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=terraform.tfstate"

    # âœ… Step 5: Terraform Plan
    - name: Terraform Plan
      run: |
        terraform plan -out=plan.tfplan -var-file="terraform.tfvars"

        
    # Step 6: Upload Terraform Plan Artifact
    - name: Upload Terraform Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: plan.tfplan
        retention-days: 5  # Keep the artifact for 5 days

    # âœ… Step 7: Check if Plan Exists
    - name: Check Terraform Plan Exists
      id: plan-check
      run: |
        if [ -f plan.tfplan ]; then
          echo "::set-output name=plan_exists::true" >> $GITHUB_ENV
        else
          echo "::set-output name=plan_exists::false" >> $GITHUB_ENV
        fi

  deploy:
    name: Terraform Apply
    needs: init-and-plan
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}  # Manual trigger
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # âœ… Step 1: Login to Azure
    - name: Login to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        allow-no-subscriptions: true

    # âœ… Step 2: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      
    # âœ… Step 3: Configure Terraform for OIDC
    - name: Set Terraform Environment Variables
      run: |
        echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
        echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

    # âœ… Step 4: Terraform Init (Again)
    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=terraform_tfstate_rg" \
          -backend-config="storage_account_name=terraformconfigsa" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=terraform.tfstate"
          
    # âœ… Step 5: Download Terraform Plan Artifact
    - name: Download Terraform Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan

    # âœ… Step 6: Apply Terraform Plan
    - name: Apply Terraform
      run: |
        terraform apply -auto-approve plan.tfplan


  destroy:
    name: Terraform Destroy
    needs: init-and-plan
    runs-on: ubuntu-latest
    if: needs.init-and-plan.outputs.plan-exists == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # âœ… Step 1: Login to Azure
    - name: Login to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        allow-no-subscriptions: true

    # âœ… Step 2: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      
    # âœ… Step 3: Configure Terraform for OIDC
    - name: Set Terraform Environment Variables
      run: |
        echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
        echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

    # âœ… Step 4: Terraform Init (Again)
    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=terraform_tfstate_rg" \
          -backend-config="storage_account_name=terraformconfigsa" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=terraform.tfstate"
          
    # âœ… Step 5: Download Terraform Plan Artifact
    - name: Download Terraform Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan

    # âœ… Step 6: Terraform Destroy
    - name: Destroy Terraform Resources
      run: |
        terraform destroy -var-file="variables.tfvars"